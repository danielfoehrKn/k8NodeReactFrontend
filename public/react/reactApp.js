import React from 'react'import {render} from 'react-dom'import socketIOClient from "socket.io-client";//react-materializeimport {Collection, CollectionItem, Parallax} from 'react-materialize'import {toast, ToastContainer} from 'react-toastify';import 'react-toastify/dist/ReactToastify.css';import ReactTable from "react-table";import 'react-table/react-table.css'import {Bar} from 'react-chartjs-2';var NavigationBar = require('./navBar');var IndexOverview = require('./indexOverview');var Footer = require('./footer');var ContactUs = require('./contactUs');var ButtonParallax = require('./buttonParallax');// fetch data from node server -> node server connects to backend & analyzer// node is in cluster and has to do the requests to both the java and the go backend. Frontend is in users browser and thus cannot access cluster internal servicesclass RegisteredRepositoriesList extends React.Component {    render() {        const data = this.props.data;        const isLoading = this.props.isLoading;        const error = this.props.error;        if (error) {            return <p>{error.message}</p>;        }        if (isLoading) {            return <p>Loading ...</p>;        }        if (data == null || data.length == 0)            return null;        return (            <div className="container">                <Collection header='Registered Github Repositories'>                    {data.map(repo =>                        <CollectionItem key={repo.id}>{repo.id}</CollectionItem>                    )}                </Collection>            </div>        );    }}class ReportComponent extends React.Component {    render() {        const data = this.props.data;        const isLoading = this.props.isLoading;        const error = this.props.error;        if (error) {            return <p>{error.message}</p>;        }        const columns = [{            id: 'repository',            Header: 'Repository',            accessor: d => d._id.repo // String-based value accessors!        }, {            id: 'action',            Header: 'Action',            accessor: d => d._id.action        }, {            id: 'label', // Required because our accessor is not a string            Header: 'Label',            accessor: d => d._id.label // Custom value accessors!        }, {            Header: 'Count', // Custom header components!            accessor: 'count'        }]        return (            <ReactTable                data={data}                columns={columns}                loading={isLoading}                defaultPageSize={5}            />        )    }}class ReportChart extends React.Component {    render() {        const data = this.props.data;        const isLoading = this.props.isLoading;        const error = this.props.error;        if (error) {            return <p>{error.message}</p>;        }        if (isLoading) {            return <p>Loading ...</p>;        }        if (data == null || data.length == 0)            return null;        // client side post-processing that normally should have been done by the DMBS        var map = new Map();        data.forEach(function (item) {            var repoId = item._id.repo;            var count = item.count;            if (map.has(repoId)) {                var prevCount = map.get(repoId);                map.set(repoId, prevCount + count);            } else {                map.set(repoId, count);            }        });        //create chart.js specific input format        var dataset = new Array();        var labels = new Array();        for (let [key, value] of map) {            labels.push(key)            dataset.push(value)        }        const data2 = {            labels: labels,            datasets: [                {                    label: 'Issues per Repository',                    backgroundColor: 'rgba(255,99,132,0.2)',                    borderColor: 'rgba(255,99,132,1)',                    borderWidth: 1,                    hoverBackgroundColor: 'rgba(255,99,132,0.4)',                    hoverBorderColor: 'rgba(255,99,132,1)',                    data: dataset                }            ]        };        return (            <div>                <br/>                <Bar                    data={data2}                    width={100}                    height={300}                    options={{                        maintainAspectRatio: false                    }}                />            </div>        );    }}class App extends React.Component {    constructor(props) {        super(props);        //Repositories        this.onHandleRepoInput = this.onHandleRepoInput.bind(this);        this.fetchRegisteredRepositories = this.fetchRegisteredRepositories.bind(this);        this.registerRepository = this.registerRepository.bind(this);        //Report        this.fetchReport = this.fetchReport.bind(this);        this.state = {            error: null,            repositories: [],            report: [],            repositoryIsLoading: false,            reportIsLoading: false,            repositoryErrorMessage: null,            reportErrorMessage: null,            inputRepositoryId: "",            registeredSuccessfully: false,            registerError: false,            wsEndpoint: "http://127.0.0.1:8080"        };    }    onHandleRepoInput(event) {        this.setState({inputRepositoryId: event.target.value});    }    registerRepository(event) {        if (event != null)            event.preventDefault();        const repoId = this.state.inputRepositoryId;        if (repoId == null || repoId == "")            return;        this.setState({repositoryIsLoading: true});        console.log("Registering repo with Id " + repoId)        fetch("/api/repositories", {            method: 'post',            headers: {'Content-Type': 'application/json'},            body: JSON.stringify({"id": repoId})        })            .then(response => {                if (response.ok) {                    toast.success("Repository registered successfully", {                        position: toast.POSITION.TOP_RIGHT                    });                    this.fetchRegisteredRepositories();                    console.log("Register: response from node server: " + response);                    return response.json();                } else {                    toast.error("Error registering Repository", {                        position: toast.POSITION.TOP_RIGHT                    });                    throw new Error('Error registering repository');                }            })            .then(data => {                this.setState({repositoryIsLoading: false, registeredSuccessfully: true, registerError: false});            })            .catch(error => this.setState({                repositoryErrorMessage: error,                repositoryIsLoading: false,                registerError: true,                registeredSuccessfully: false            }));    }    fetchRegisteredRepositories(event) {        if (event != null)            event.preventDefault();        this.setState({repositoryIsLoading: true});        fetch("/api/repositories")            .then(response => {                if (response.ok) {                    console.log("Register: response from node server: " + response);                    return response.json();                } else {                    throw new Error('Error fetching repositories');                }            })            .then(data => this.setState({repositories: data, repositoryIsLoading: false}))            .catch(error => this.setState({repositoryErrorMessage: error, repositoryIsLoading: false}));    }    fetchReport(event) {        console.log("fetching report");        if (event != null)            event.preventDefault();        this.setState({reportIsLoading: true});        fetch("/api/report")            .then(response => {                if (response.ok) {                    return response.json();                } else {                    console.log("Error fetching Report")                    throw new Error('Error fetching report');                }            })            .then(data => {                console.log("Report fetched successfully: " + data);                this.setState({report: data, reportIsLoading: false});            })            .catch(error => {                this.setState({reportErrorMessage: error, reportIsLoading: false});            });    }    componentWillMount() {        // load data before component is mounted -> asap        this.fetchRegisteredRepositories();        this.fetchReport();    }    componentDidMount() {        // Handle Websocket here        console.log        const {endpoint} = this.state;        const socket = socketIOClient(endpoint);        socket.on("issueCreated", data => {            if (data.label != null && data.label == "bug") {                toast.warn("There is a new bug-Issue in repository: \"" + data.id + "\"", {                    position: toast.POSITION.TOP_RIGHT                });            }            else {                toast.success("Issue has been " + data.action + " in repository: \"" + data.id + "\"", {                    position: toast.POSITION.TOP_RIGHT                });            }            console.log("Issue created! " + JSON.stringify(data));            console.log("Id: " + data.id);            console.log("Label: " + data.label);            //reload report            this.fetchReport();        });    }    render() {        const margins = {marginLeft: 100, marginRight: 100}        const buttonInlineStyle = {fontSize: 25}        const registeredSuccessfully = this.state.registeredSuccessfully;        return (            <div>                <NavigationBar/>                <ToastContainer/>                <ButtonParallax picture={"/stylesheets/background1.jpg"} title={"Freshwater"}                                description={"Teaching me Kubernetes by example"}                                buttonDescription={"Get started"}                                buttonLink={"https://github.com/danielfoehrKn/k8Resources"}/>                <div style={margins}>                    <RegisteredRepositoriesList data={this.state.repositories}                                                isLoading={this.state.repositoryIsLoading}                                                error={this.state.repositoryErrorMessage}/>                    <h4>Register Repository</h4>                    <form onSubmit={this.registerRepository}>                        <input value={this.state.inputRepositoryId} onChange={this.onHandleRepoInput}                               style={buttonInlineStyle}/>                        <button className="btn waves-effect waves-light">Register Repository!</button>                    </form>                    <br/>                    <h3>Overall Report</h3>                    <ReportComponent data={this.state.report} isLoading={this.state.reportIsLoading}                                     error={this.state.reportErrorMessage}/>                    <ReportChart data={this.state.report} isLoading={this.state.reportIsLoading}                                 error={this.state.reportErrorMessage}/>                </div>                < IndexOverview / >                < Parallax imageSrc={"/stylesheets/background2.jpg"}/>                <ContactUs/>                <Footer/>            </div>        );    }}render(<App/>, document.getElementById('app'));